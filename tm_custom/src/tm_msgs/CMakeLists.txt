cmake_minimum_required(VERSION 3.5)
project(tm_msgs)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
# uncomment the following section in order to fill in
# further dependencies manually.
#find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
#find_package(builtin_interfaces REQUIRED)
find_package(rosidl_default_generators REQUIRED)

# if(BUILD_TESTING)
#   find_package(ament_lint_auto REQUIRED)
#   # the following line skips the linter which checks for copyrights
#   # comment the line when a copyright and license is added to all source files
#   set(ament_cmake_copyright_FOUND TRUE)
#   # the following line skips cpplint (only works in a git repo)
#   # comment the line when this package is in a git repo and when
#   # a copyright and license is added to all source files
#   set(ament_cmake_cpplint_FOUND TRUE)
#   ament_lint_auto_find_test_dependencies()
# endif()

set(msg_files
  "msg/FeedbackState.msg"
  "msg/SvrResponse.msg"
  "msg/SctResponse.msg"
  "msg/StaResponse.msg"
)
set(srv_files
  "srv/ConnectTM.srv"
  "srv/WriteItem.srv"
  "srv/AskItem.srv"
  "srv/SendScript.srv"
  "srv/SetEvent.srv"
  "srv/SetIO.srv"
  "srv/SetPositions.srv"
  "srv/AskSta.srv"
)

rosidl_generate_interfaces(${PROJECT_NAME}
  ${msg_files}
  ${srv_files}
  DEPENDENCIES std_msgs
)

ament_export_dependencies(rosidl_default_runtime)
ament_package()
